apply plugin: "curseforge"

ext.curseforgeFile = file "./props/curseforge.properties"
curseforgeFile.withReader {
    def prop = new Properties()
    prop.load(it)
    project.ext.curseforgeConfig = new ConfigSlurper().parse prop
}

// get the changelog
def log = getChangelog()

curse {
    if (System.getenv().BUILD_NUMBER == null) {
        if (hasProperty('curseforge_key')) apiKey = project.curseforge_key
        else apiKey = 0
        projectId = curseforgeConfig.projectID
        changelog = log
        releaseType = curseforgeConfig.releaseType
    }
}

task pushToCurse(group: 'versioning', description: 'Pushes all outstanding commits to curseforge') << {
    setLastCursePush(curseforgeConfig.lastCurseforgePush, getLastGitPush())
    pushGitCommit()
}

curse.dependsOn(pushToCurse)

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Curseforge Groovy Methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

private String getGitPushMessage() {
    return "Update git.prop and curseforge.prop"
}

private String getLastGitPush() {
    def outStream = new ByteArrayOutputStream()
    def lastGitPush = ""
    try {
        exec {
            executable = "git"
            args = ["rev-parse", "origin/master"]
            standardOutput = outStream
        }
        lastGitPush = outStream.toString().trim()
    }
    catch (e) {
        logger.quiet "Error while fetching last git tag: $e"
    }
    return lastGitPush
}

private void setLastCursePush(String prevGitKey, String nextGitKey) {
    StringBuilder token = new StringBuilder()
    StringBuilder value = new StringBuilder()
    token.append("lastCurseforgePush=")
    value.append("lastCurseforgePush=")
    token.append(prevGitKey)
    value.append(nextGitKey)

    ant.replace(file: "props/curseforge.properties", token: token.toString(), value: value.toString())
}

private String getRawChangelog() {
    def outStream = new ByteArrayOutputStream()
    String changelog = ""
    String lastGitPush = "${curseforgeConfig.lastCurseforgePush}"

    try {
        exec {
            executable = "git"
            args = ["log", "--pretty=%s~%b", "$lastGitPush..HEAD"]
            standardOutput = outStream
        }

        changelog = outStream.toString().trim()
    }
    catch (e) {
        logger.quiet "Error while generating theChangelog: $e"
    }

    return changelog
}

private String getChangelog() {
    String changelog = getRawChangelog()
    final String[] split = changelog.split("\n")

    final StringBuilder result = new StringBuilder()

    result.append("Changelog:\n")

    result.append("\t")
    result.append(getGitPushMessage())
    result.append("\r\n")

    for (String s : split) {
        if (s.length() == 0) continue

        final String[] titleVbody = s.split("~")
        String temp = "\t" + titleVbody[0]

        for (int i = 1; i < titleVbody.length; i++) {
            temp = temp + "\n\t\t" + titleVbody[i]
        }

        temp = temp + "\r\n"
        result.append(temp)
    }

    result.toString()
}

private void pushGitCommit() {
    exec {
        executable = 'git'
        args = ['add', '-A']
    }
    exec {
        executable = 'git'
        args = ['commit', '-m', getGitPushMessage()]
    }
    exec {
        executable = 'git'
        args = ['push', 'origin', 'master:master']
    }
}

